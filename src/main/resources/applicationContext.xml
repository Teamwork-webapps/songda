<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd"
	default-lazy-init="true">

	<description>Spring公共配置</description>

	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<context:component-scan base-package="com.songda.recruit">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<!-- 支持上传文件 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver" />

	<!-- 异步延迟功能 -->
	<!-- 默认线程池 -->
	<task:annotation-driven executor="fileProcess"/>
	<!-- 异步延迟线程池，核心最小4，最大10个。超出后，由主线程调用，不另外生成线程 -->
	<!-- 当最小的线程数已经被占用满后，新的任务会被放进queue里面,超过20个，则回到主线程调用。 -->
	<task:executor id="fileProcess" pool-size="4-10" rejection-policy="CALLER_RUNS" queue-capacity="20"/>
	

	<!-- Jpa Entity Manager 配置 -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="com.songda.recruit" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="database" value="MYSQL" />
				<property name="showSql" value="true" />
			</bean>
		</property>
	</bean>

	<!-- spring json 支持 -->
	<bean id="mappingJackson2HttpMessageConverter" class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
					<property name="supportedMediaTypes">
						<list>
							<value>text/html;charset=UTF-8</value>
							<value>text/plain;charset=UTF-8</value>
							<value>application/json;charset=UTF-8</value>
						</list>
					</property>
				</bean>
			</list>
		</property>
	</bean>

	<!-- Spring Data Jpa配置 -->
	<jpa:repositories base-package="com.songda.recruit"
		transaction-manager-ref="transactionManager"
		entity-manager-factory-ref="entityManagerFactory" />

	<!-- Jpa 事务配置 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />

	<!-- JSR303 Validator定义 -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />

	<bean id="fmXmlEscape" class="freemarker.template.utility.XmlEscape" />

	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		<property name="suffix">
			<value>.jsp</value>
		</property>
		<property name="contentType" value="text/html;charset=UTF-8"></property>
		<property name="allowSessionOverride" value="true"></property>
	</bean>
	
	<!-- freemark begin -->
	<!-- 配置freeMarker的模板路径 -->
	<beans profile="${profiles.active}">
		<context:property-placeholder
			ignore-unresolvable="true"
			location="classpath*:/${profiles.active}/freemarker.properties" />

		<!-- 数据源配置, 使用DBCP数据库连接池 -->
		<!-- <bean id="freemarkerConfig"
			class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer"> -->
		<bean id="freemarkerConfig" class="com.songda.recruit.service.base.ShiroTagFreeMarkerConfigurer">
			<property name="templateLoaderPath" value="/WEB-INF/views/" />
			<property name="freemarkerVariables">
				<map>
					<entry key="xml_escape" value-ref="fmXmlEscape" />
					<entry key="webRoot" value="${webRoot}" />
					<entry key="webTitle" value="${webTitle}" />
					<entry key="weixinWebRoot" value="${weixinWebRoot}" />
				</map>
			</property>
			<!-- FreeMarker默认每隔5秒检查模板是否被更新，如果已经更新了，就会重新加载并分析模板。 但经常检查模板是否更新可能比较耗时。如果你的应用运行在生产模式下，而且你预期模板不会经常更新， 
				则可以将更新的延迟时间延长至一个小时或者更久。 可以通过为freemarkerSettings属性设置template_update_delay达到这一目的 -->
			<property name="freemarkerSettings">
				<props>
					<prop key="template_update_delay">${template_update_delay}</prop><!-- 秒 -->
					<prop key="tag_syntax">${tag_syntax}</prop><!-- 设置标签类型 两种：[] 和 <> 。[] 这种标记解析要快些 -->
					<prop key="default_encoding">${default_encoding}</prop>
					<prop key="output_encoding">${output_encoding}</prop>
					<prop key="locale">${locale}</prop>
					<prop key="date_format">${date_format}</prop>
					<prop key="time_format">${time_format}</prop>
					<prop key="datetime_format">${datetime_format}</prop>
					<prop key="number_format">${number_format}</prop><!-- 设置数字格式 以免出现 000.00 -->
					<prop key="classic_compatible">${classic_compatible}</prop><!-- 可以满足一般需要。默认情况变量为null则替换为空字符串，如果需要自定义，写上${empty!"EmptyValue 
						of fbysss"}的形式即可 -->
					<prop key="template_exception_handler">${template_exception_handler}</prop><!-- ignore,debug,html_debug,rethrow -->
				</props>
			</property>
		</bean>
	</beans>

	<beans profile="${profiles.active}">
		<context:property-placeholder
			ignore-unresolvable="true"
			location="classpath*:/${profiles.active}/application.properties" />

		<!-- 数据源配置, 使用DBCP数据库连接池 -->
		<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
			destroy-method="close">
			<!-- Connection Info -->
			<property name="driverClassName" value="${jdbc.driver}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
			<!-- Connection Pooling Info -->
			<property name="maxActive" value="${dbcp.maxActive}" />
			<property name="maxIdle" value="${dbcp.maxIdle}" />
			<property name="defaultAutoCommit" value="false" />
			<!-- 连接Idle一个小时后超时 -->
			<property name="timeBetweenEvictionRunsMillis" value="3600000" />
			<property name="minEvictableIdleTimeMillis" value="3600000" />
		</bean>
	</beans>
</beans>